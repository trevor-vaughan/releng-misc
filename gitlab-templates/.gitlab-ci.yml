---
stages:
  - 'sanity'
  - 'validation'
  - 'acceptance'
  - 'compliance'
  - 'deployment'

variables:
  PUPPET_VERSION:    'UNDEFINED' # <- Matrixed jobs MUST override this (or fail)
  BUNDLER_VERSION:   '1.17.1'

  # Force dependencies into a path the gitlab-runner user can write to.
  # (This avoids some failures on Runners with misconfigured ruby environments.)
  GEM_HOME:          .vendor/gem_install
  BUNDLE_CACHE_PATH: .vendor/bundle
  BUNDLE_PATH:       .vendor/bundle
  BUNDLE_BIN:        .vendor/gem_install/bin
  BUNDLE_NO_PRUNE:   'true'

.pup5_ruby_version:
  image: 'ruby:2.4.5'
  variables:
    PUPPET_VERSION:           'UNDEFINED' # <- Matrixed jobs MUST override this (or fail)
    BEAKER_PUPPET_COLLECTION: 'puppet5'
    MATRIX_RUBY_VERSION:      '2.4.5'

# bundler dependencies and caching
#
# - Cache bundler gems between pipelines foreach Ruby version
# - Try to use cached and local resources before downloading dependencies
# --------------------------------------
.setup_bundler_env: &setup_bundler_env
  cache:
    untracked: true
    key: "${CI_PROJECT_NAMESPACE}_ruby-${MATRIX_RUBY_VERSION}_bundler"
    paths:
      - '.vendor'
  before_script:
    - 'ruby -e "puts %(\n\n), %q(=)*80, %(\nSIMP-relevant Environment Variables:\n\n#{e=ENV.keys.grep(/^PUPPET|^SIMP|^BEAKER|MATRIX/); pad=e.map{|x| x.size}.max+1; e.map{|v| %(    * #{%(#{v}:).ljust(pad)} #{39.chr + ENV[v] + 39.chr}\n)}.join}\n),  %q(=)*80, %(\n\n)"'
    - 'declare GEM_BUNDLER_VER=(-v "~> ${BUNDLER_VERSION:-1.17.1}")'
    - 'declare GEM_INSTALL_CMD=(gem install --no-document)'
    - 'declare BUNDLER_INSTALL_CMD=(bundle install --no-binstubs --jobs $(nproc) "${FLAGS[@]}")'
    - 'mkdir -p ${GEM_HOME} ${BUNDLER_BIN}'
    - 'gem list -ie "${GEM_BUNDLER_VER[@]}" --silent bundler || "${GEM_INSTALL_CMD[@]}" --local "${GEM_BUNDLER_VER[@]}" bundler || "${GEM_INSTALL_CMD[@]}" "${GEM_BUNDLER_VER[@]}" bundler'
    - 'rm -rf pkg/ || :'
    - 'bundle check || rm -f Gemfile.lock && ("${BUNDLER_INSTALL_CMD[@]}" --local || "${BUNDLER_INSTALL_CMD[@]}" || bundle pristine ||  "${BUNDLER_INSTALL_CMD[@]}") || { echo "PIPELINE: Bundler could not install everything (see log output above)" && exit 99 ; }'

# To avoid running a prohibitive number of tests every commit,
# don't set this env var in your gitlab instance
.only_with_SIMP_FULL_MATRIX:
  only:
    variables:
      - $SIMP_FULL_MATRIX == "yes"

# Puppet Versions
#-----------------------------------------------------------------------

.pup_5:
  extends: .pup5_ruby_version 
  variables:
    PUPPET_VERSION: '~> 5.0'


# Pipeline / testing matrix
#=======================================================================

sanity_checks:
  extends: '.pup_5'
  <<: *setup_bundler_env
  stage: 'sanity'
  tags: ['docker']
  script:
    - 'if `hash apt-get`; then apt-get update; fi'
    - 'if `hash apt-get`; then apt-get install -y rpm; fi'
    - 'bundle exec rake check:dot_underscore'
    - 'bundle exec rake check:test_file'
    - 'bundle exec rake pkg:check_version'
    - 'bundle exec rake pkg:compare_latest_tag'
    - 'bundle exec rake pkg:create_tag_changelog'
    - 'bundle exec puppet module build'



